#!/usr/bin/env bash
# vim:tw=0:ts=2:sw=2:et:norl:ft=bash
# Author: Landon Bouma <https://tallybark.com/>
# Project: https://github.com/DepoXy/git-put-wise#ü•®
# License: MIT

# Copyright (c) ¬© 2022-2023 Landon Bouma. All Rights Reserved.

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

check_deps () {
  check_dep_realpath || exit 1
}

check_dep_realpath () {
  ( true \
    && command -v realpath > /dev/null \
    && realpath --version 2> /dev/null | head -1 | grep -q -e "(GNU coreutils)" \
  ) && return 0 || true

  hint_install_deb () { >&2 echo "  sudo apt-get install coreutils"; }
  hint_install_brew () { >&2 echo "  brew install realpath"; }

  check_dep_with_hint 'realpath' 'realpath (from coreutils)' ${_assume_failed:-true}

  return 1
}

check_dep_with_hint () {
  cmd="$1"
  name="${2:-${cmd}}"
  assume_failed=${3:-false}

  if ! ${assume_failed}; then
    command -v ${cmd} > /dev/null && return 0 || true
  fi

  os_is_macos () { [ "$(uname)" = 'Darwin' ]; }

  >&2 echo "ERROR: Requires ‚Äò${cmd}‚Äô"
  >&2 echo "- Hint: Install ‚Äò${cmd}‚Äô, e.g.:"
  os_is_macos && hint_install_brew || hint_install_deb 

  return 1
}

# ***

source_deps () {
  # Sets LOG_LEVEL=${LOG_LEVEL:-40}.
  source_dep "deps/sh-logger/bin/logger.sh"
  source_dep "deps/sh-git-nubs/lib/git-nubs.sh"
  source_dep "lib/cli_parse_params.sh"
  source_dep "lib/common_put_wise.sh"
  source_dep "lib/dep_apply_confirm_patch_base.sh"
  source_dep "lib/dep_ephemeral_branch.sh"
  source_dep "lib/dep_tig_prompt.sh"
}

source_dep () {
  local dep_path="$1"

  # This file at bin/git-put-wise, so project root is one level up.
  local project_root
  project_root="$(dirname -- "$(realpath -- "$0")")/.."

  # DEV: Source this script from project root to test individual functions.
  # - Source apply/archive/pull/push script(s) afterwards to test them, too.
  local is_sourced=false
  if $(printf %s "$0" | grep -q -E '(^-?|\/)(ba|da|fi|z)?sh$' -); then
    is_sourced=true
    if [ -n "${BASH_SOURCE[0]}" ]; then
      # I.e.,
      #   if [ "$(basename -- "$0")" = "bash" ]; then
      project_root="$(dirname -- "${BASH_SOURCE[0]}")/.."
    else
      project_root="$(pwd -L)"
    fi
  fi

  local dep_path="${project_root}/${dep_path}"

  if [ ! -f "${dep_path}" ]; then
    >&2 echo "ERROR: Could not identify git-put-wise dependency path."

    if ! ${is_sourced}; then
      >&2 echo "- Hint: Did you *copy* bin/git-put-wise somewhere on PATH?"
      >&2 echo "  - Please use a symlink instead."
    else
      >&2 echo "- Hint: Try sourcing this script from the project root instead."
    fi

    >&2 echo "- Our incorrect dependency path guess: ‚Äú${dep_path}‚Äù"

    exit 1
  fi

  . "${dep_path}"
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

main () {
  set -e

  source_deps

  cli_parse_params "$@"

  cli_must_verify_action_specified "$@"

  cli_setup_log_level

  # Verify and normalize PW_PATCHES_REPO.
  local insist_repo=false
  # I.e., on --apply, --apply-all, or --archive, create the repo or
  # complain if bad path; but on --push or -pull, ignore if unset.
  if ! ( \
    ${PW_ACTION_PUSH} ||
    ${PW_ACTION_PULL} ||
    ${PW_ACTION_PULL_CLEANUP} ||
    ${PW_ACTION_SCOPE} ||
    ${PW_ACTION_SHA} ||
  false); then
    insist_repo=true
  fi
  maybe_create_patches_repo_and_canonicalize_path ${insist_repo}

  # The action functions will each verify and normalize PW_PROJECT_PATH.

  # 2022-11-05: I've never down case this way, seems silly. Very dispatcher.
  case true in
    ${PW_ACTION_PUSH})
      source_dep "lib/put_wise_push_remotes.sh"
      put_wise_push_remotes
      ;;
    ${PW_ACTION_PULL})
      source_dep "lib/put_wise_pull_remotes.sh"
      put_wise_pull_remotes
      ;;
    ${PW_ACTION_ARCHIVE})
      source_dep "lib/put_wise_archive_patches.sh"
      put_wise_archive_patches
      ;;
    ${PW_ACTION_APPLY})
      # --apply needs to discern if path specified is file
      # path to archive, or directory path to project.
      source_dep "lib/put_wise_apply_patches.sh"
      put_wise_apply_patches
      ;;
    ${PW_ACTION_APPLY_ALL})
      # --apply-all doesn't use a path, but prints if set.
      source_dep "lib/put_wise_apply_patches.sh"
      put_wise_apply_patches
      ;;
    ${PW_ACTION_RESET})
      put_wise_reset_patches_repo
      ;;
    ${PW_ACTION_SCOPE})
      put_wise_print_scoping_boundary_sha
      ;;
    ${PW_ACTION_SHA})
      put_wise_print_sha_or_sha
      ;;
    ${PW_ACTION_REBASE_CONTINUE})
      put_wise_rebase_continue
      ;;
    ${PW_ACTION_REBASE_ABORT})
      put_wise_rebase_abort
      ;;
    ${PW_ACTION_PULL_CLEANUP})
      source_dep "lib/put_wise_pull_remotes.sh"
      # Remove the action name.
      shift
      put_wise_pull_remotes_cleanup "$@"
      ;;
  esac  
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

check_deps
source_deps

if [ "$0" = "${BASH_SOURCE[0]}" ]; then
  if [ ${BASH_VERSINFO[0]} -le 3 ] && [ -n "${HOMEBREW_PREFIX}" ]; then
    # Sneakily switch to Bash 5+.
    # - Currently only necessary for `read -N` support.
    "${HOMEBREW_PREFIX}/bin/bash" "$0" "$@"
  else
    main "$@"
  fi
fi

